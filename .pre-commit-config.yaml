repos:
  # Pre-commit hooks for general file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # Safety checks
      - id: check-ast
        name: Check Python AST
      - id: check-builtin-literals
        name: Check builtin type constructor use (Python)
      - id: check-case-conflict
        name: Check for case conflicts
      - id: check-docstring-first
        name: Check docstring is first
      - id: check-executables-have-shebangs
        name: Check that executables have shebangs
      - id: check-json
        name: Check JSON
        exclude: ^src/meeting_minutes/crews/gmailcrew/tools/credentials\.json$
      - id: check-merge-conflict
        name: Check for merge conflicts
      - id: check-yaml
        name: Check YAML
      - id: check-toml
        name: Check TOML
      - id: check-xml
        name: Check XML

      # File formatting
      - id: end-of-file-fixer
        name: Fix End of Files
      - id: trailing-whitespace
        name: Trim Trailing Whitespace
        args: [--markdown-linebreak-ext=md]

      # Security
      - id: detect-private-key
        name: Detect Private Key

  # Python code formatting with Black
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        name: Format Python code (Black)
        language_version: python3
        args: [--line-length=88]

  # Python import sorting with isort
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: Sort Python imports (isort)
        args: [--profile=black, --multi-line=3]

  # Python linting with flake8
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        name: Lint Python code (flake8)
        args: [
          --max-line-length=88,
          --extend-ignore=E203,W503,E501,
          --exclude=.git,__pycache__,build,dist,.venv,venv
        ]
        additional_dependencies: [flake8]

  # Python docstring formatting
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        name: Check Python docstrings (pydocstyle)
        args: [--convention=google]
        exclude: ^(test_|tests/)
        additional_dependencies: [tomli>=1.1.0]

  # Security scanning with bandit
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: Security scan (bandit)
        args: [-r, --skip=B101,B601]
        exclude: ^test_

  # Check for common Python upgrade issues
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.15.0
    hooks:
      - id: pyupgrade
        name: Upgrade Python syntax (pyupgrade)
        args: [--py38-plus]

  # Remove unused imports and variables
  - repo: https://github.com/pycqa/autoflake
    rev: v2.2.1
    hooks:
      - id: autoflake
        name: Remove unused imports (autoflake)
        args: [
          --in-place,
          --remove-all-unused-imports,
          --remove-unused-variables,
          --expand-star-imports,
          --ignore-init-module-imports
        ]

  # Local hooks for project-specific checks
  - repo: local
    hooks:
      - id: check-env-example
        name: Check .env.example exists
        entry: python -c "import os; exit(0 if os.path.exists('.env.example') else 1)"
        language: system
        files: ^\.env$
        pass_filenames: false

      - id: check-requirements
        name: Check requirements.txt is sorted
        entry: |
          python -c "
          import sys;
          try:
              with open('requirements.txt', 'r') as f:
                  lines = [line.strip() for line in f if line.strip() and not line.startswith('#')];
              sorted_lines = sorted(lines, key=str.lower);
              sys.exit(0 if lines == sorted_lines else 1)
          except FileNotFoundError:
              sys.exit(0)
          "
        language: system
        files: ^requirements\.txt$
        pass_filenames: false

# Global configuration
default_language_version:
  python: python3

fail_fast: false
